array1.sh
array2.sh
case_statement.sh
command_line_arg2.sh
command_line_arg.sh
createuser.sh
exit_status.sh
file1.sh
file2.sh
file3.sh
file4.sh
file5.sh
file_handling
file_type.sh
forloop1.sh
forloop2.sh
forloop3.sh
forloop4.sh
forloop5.sh
forloop6.sh
function2.sh
function.sh
if_test1.sh
if_test2.sh
ptrn.sh
read_2char.sh
read2.sh
read_array.sh
read.sh
sigintrupt1.sh
sigintrupt.sh
until_loop_1.sh
while_loop_1.sh
while_loop_2.sh
#!/bin/bash

declare -a var

var[0]="Hello"
var[1]="red"
var[2]="hi"

echo ${var[0]}
echo ${var[1]}
echo ${var[2]}


array_var=("the" "a a" "2" "2525#")


echo ${array_var[0]}
echo ${array_var[1]}
echo ${array_var[2]}
echo ${array_var[3]}
#!/bin/bash

echo "Enter the IP address: "
read -a ips

for i in ${ips[@]}
do

	ping -c 1 -w 3 $i 2>&1 >/dev/null
        if [ $? -eq 0 ]
        then
		echo "host $i alive"
	else
		echo "host $i dead"
	fi
done
#!/bin/bash

echo "Enter a number, between 1 to 4. Type "quit" to exit"

while [ 1 ]
do
	read mynum
	case $mynum in
		1) echo "Its a one"
			;;
		2) echo "Its a two"
			;;
		3) echo "Its a three"
			;;
		4) echo "Its a four"
			;;
		"quit") echo "You want to quit"
			break
			;;
		*) echo "Oops its not allowd"
		;;
	esac
done	

	
echo "After the while loop"
#!/bin/bash

## it applies only when we include arguments in double quoate

for i in "$*"                  #treats all command line argument as single argument
{

  echo $i
}

for i in "$@"                 # treats each as different
{
  echo $i
}
#! /bin/bash

echo "total no of arg : $#"
echo " script name: $0"
echo "script name without leading path `basename $0` "
echo " first: $1"
echo " second: $2"

echo "total argument together is $@"
echo "total argument together is $*"
#!/bin/bash

read -n5 -p "Enter username :" user
echo ""
read -s -p "Enter password :" pass

root=`id -u`
if [ $root == 0 ]
then
	check=`grep $user /etc/passwd`
	if [ -z $check ]
	then
		date=`date +'%y%m%d%H%M%S'`
		useradd $user -p $pass > createlog.$date.txt 2>&1
                res=`echo $?`
                if [ -z  $res ]; then
        	printf "\n user '$user' created with password : $pass \n"
                fi
	else
		printf "\n user '$user' alreday exist \n"
	fi
else 

	printf "\n You are not a root user \n"
fi 
#!/bin/bash

ls -al abc.txt

if [ $? -ne 0 ]
then
     exit 4                      
		# exit value should be in the rage of 0-255 . should not be negative value
fi

echo "this is normal terminstaion"
exit 0
#!/bin/bash

cat file.txt | while read LINE
do
 	echo $LINE
done
#!/bin/bash

while read LINE
do
	echo $LINE
done < file.txt
#!/bin/bash

while input_file= read LINE
do
	echo $LINE
done < file.txt
#!/bin/bash

myfile="file.txt"
counter=0

cat $myfile | while read LINE     # The command written after pipe is executed in new shell     counter variable ll be local variable in script
do
	echo $LINE
        #counter=`expr $counter + 1 `
        counter=$((counter+1))
        echo $counter
done

echo "Total number of line in File '$myfile' is : $counter"  # this is the reason counter value reset to global variable declared at begining of the script 
#!/bin/bash

myfile="file.txt"
counter=0

while read LINE
do
	echo $LINE
        #counter=`expr $counter + 1 `
        counter=$((counter+1))
        echo $counter
done < file.txt

echo "Total number of line in File '$myfile' is : $counter"
cat: file_handling: Is a directory
#!/bin/bash

file=$1

if [ -e $file ]
then
        echo "$file exists"
	if [ -f $file ]
        then
		echo "$file regular file"
        elif [ -d $file ]
	then
		echo "$file directory"
        elif [ -b $file ]
        then
                echo "$file block"
	elif [ -c $file ]
        then
                echo "$file character"
        fi
else
	echo "file not exists"
fi
#!/bin/bash
for i in 1 2 3 4 5 6 s a a
do
     echo $i
done

#!/bin/bash 
for i in {1..25}                       #25 ittiratesdipaly for 1 to 25  (increment by one . default one)
do
     echo $i
done
#!/bin/bash

for ((i=1; i<=10; i++))
do 
	echo $i;
done

#!/bin/bash
for i in {1..25..2}                       #25 ittiratesdipaly for 1 to 25  ( increment by 2 )
do
     echo $i
done
#!/bin/bash

for i in $(seq 0 2 20)
do

echo $i

done
#!/bin/bash

for i in `seq 1 2 10`
do 
	echo $i
done
#!/bin/bash

disk_function()
{

        disk_drive1=$1
        disk_drive2=$2

        
	echo "-----first----------"
        df -kh $disk_drive1
	echo "------second---------"
        df -kh $disk_drive2


}

echo "Display disk free space"

cmd_arg1=$1
cmd_arg2=$2

disk_function $cmd_arg1 $cmd_arg2
#!/bin/bash

disk_function()
{

	disk_drive=$1
        df -kh $disk_drive

}

echo "Display disk free space"
disk_function /dev/sda1
#!/bin/bash 

a=12

if [ $a -le 10 ]
then
	echo "true $a "
        printf "My current working dir \n $PWD \n"
elif [ $a -le 25 ]
then
	echo " $a grater tan 10 less than 25"
else
 	echo "false"

fi
#!/bin/bash

a=11

if [ $a -gt 10 ] && [ $a -le 25 ]
then
	echo "true"
else
	echo "false"
fi

#! /bin/bash 

n=10

while [ $n -ge 0 ]
do
	m=$n;
	while [ $m -gt 0 ]
        do
             echo -n  " * ";
             m=`expr $m - 1`;

	done
        echo "" ;

       
        n=`expr $n - 1`;
done

x=0

while [ $x -lt 10 ]
do
        y=$x;
        while [ $y -ge 0 ]
        do
             echo -n  " * ";
             y=`expr $y - 1`;

        done
        echo "" ;

 
        x=`expr $x + 1`;
done

for i in seq{1..20};do echo " ** ";done
#!/bin/bash


read -n5 -p "Enter 5 digit user ID: "  NUM
read -s -p "Password :" pass

printf "ID: $NUM"
printf "Password : $pass \n"
#!/bin/bash

echo -n "Enter the number: "
read num


echo -n "NUM: $num"
echo ""
#!/bin/bash 

read -a my_array

for i in ${my_array[@]}
do

 		echo "Array : $i"
done
#!/bin/bash 

read NUM

echo "number is $NUM"
#!/bin/bash

function cleanup()
{
	echo "Received signals"
        echo "clean up going on"
        echo "signal received is : $1 "
}

trap 'cleanup SIGINT; exit 1' SIGINT
trap 'cleanup SIGHUP; exit 1' SIGHUP
trap 'cleanup SIGILL; exit 1' SIGILL

while :
do 
	echo "Hello, I am the boss"
	sleep 1
done
#!/bin/bash


trap 'echo "Hey, you are teying to kill me"' SIGINT

while :
do 
	echo "Hello, I am the boss"
	sleep 1
done
#!/bin/bash

count=3

until [ $count -le 0 ]
do

       echo $count
       count=$((count-1))
done
#! /bin/bash -x

n=1

while [ $n -le 5 ]
do
     loc="/home/kirans/shellscript" 
     name=$loc/`date +"%m%d%Y%H%m%S"`;
     touch $name;
     n=$((n+1))
     sleep 1;
done

#!/bin/bash

count=0

while [ $count -le 5 ]
do

	echo "hello world"
        sleep 1
        #count=$((count+1))
        count=`expr $count + 1`
done

